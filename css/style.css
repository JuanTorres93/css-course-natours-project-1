@charset "UTF-8";
/* Basix reset */
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  /* 
  Inherit box-sizing from parent, which will the the value
  defined in the body element
  */
  box-sizing: inherit;
}

html {
  /* 
  Percentage of the font size given by the browser. It is bad
  practice to set this in px because it will prevent users from
  changing the default font size in their browsers.
  100% usually means 16px, which is the value generally used by 
  web browsers.
  Here it is set to 62.5% to make it 10px, which is easier to
  work with.
  */
  font-size: 62.5%;
}

body {
  box-sizing: border-box;
}

/* @keyframes and name of the animation */
/* Then specify what is wanted to happen in each
moment of the animation */
@keyframes moveInLeft {
  /* For browser performance is always best to animate,
     at most, 2 properties, specifically opacity and transform.
     However, with transform, can be accomplish a LOT of stuff */
  /* 0% Is BEFORE the animation actually starts */
  0% {
    opacity: 0;
    transform: translateX(-10rem);
  }
  /* 100% Is when the animation finishes */
  80% {
    opacity: 1;
    transform: translate(1rem);
  }
  /* 100% Is when the animation finishes */
  100% {
    opacity: 1;
    transform: translate(0);
  }
}
@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem);
  }
  80% {
    opacity: 1;
    transform: translate(-1rem);
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
}
@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem);
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
}
body {
  /* 
  Font reset is specified in the body instead of in * to harness
  the power of inheritance. It is more efficient to do so.
  */
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  /* 1.7 time larger than the default value */
  line-height: 1.7;
  color: #777;
  padding: 3rem;
}

.heading-primary {
  color: white;
  text-transform: uppercase;
  /* To fix little "shakiness" in animation that should not be there */
  backface-visibility: hidden;
  margin-bottom: 6rem;
  /* Block elements occupy the entire width available and create line breaks after and before them */
}
.heading-primary--main {
  display: block;
  font-size: 6rem;
  font-weight: 400;
  letter-spacing: 3.5rem;
  /* Apply animation. MANDATORY animation-name and animation-duration */
  animation-name: moveInLeft;
  animation-duration: 1s;
  /* Curva temporal de la animación (interpolación) (recuerda blender) */
  animation-timing-function: ease-out;
  /* animation-iteration-count: 3; */
  /* animation-delay: .3s; */
}
.heading-primary--sub {
  display: block;
  font-size: 2rem;
  font-weight: 700;
  letter-spacing: 1.75px;
  /* animation can be used as summary of the 3 properties used in
     heading-primary-main
  */
  animation: moveInRight 1s ease-in-out;
}

.heading-secondary {
  display: inline-block;
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  background-image: linear-gradient(to right, #55c57a, #28b485);
  /* Background clip is used to clip the background to the text */
  background-clip: text;
  color: transparent;
  letter-spacing: 2px;
  transition: all 0.2s;
}
.heading-secondary:hover {
  transform: skewY(2deg) skewX(15deg) scale(1.1);
  text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2);
}

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase;
}

.paragraph {
  font-size: 1.6rem;
}
.paragraph:not(:last-child) {
  margin-bottom: 3rem;
}

.u-center-text {
  text-align: center;
}

.u-margin-bottom-big {
  margin-bottom: 8rem;
}

.u-margin-bottom-medium {
  margin-bottom: 4rem;
}

.u-margin-bottom-small {
  margin-bottom: 1.5rem;
}

.btn {
  /* 
  :link is an special selector for when the element acts
  as a link (an anchor tag).
  :visited is when the user has clicked the button once and
  then he sees it again
  */
  /* 
  :active is an special selector for when 
  the element is clicked
  */
  /*  
  pseudo-elements acts as if they are virtual elements existing
  on the html and can be styled
  */
}
.btn:link, .btn:visited {
  font-size: 1.6rem;
  text-transform: uppercase;
  text-decoration: none;
  /* 
  inline-block para cuando se quiera trabajar bien con
  paddings, widths, heights, etc.
  inline-blocks are treated like it was text
  */
  display: inline-block;
  padding: 1.5rem 4rem;
  border-radius: 10rem;
  /* 
  transition: properties to be animated and duration
  transition is specified only in the initial state
  */
  transition: all 0.2s;
  /* Act as a reference for .btn::after */
  position: relative;
}
.btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
}
.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0;
}
.btn:active {
  transform: translateY(-1px);
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2);
}
.btn--white {
  background-color: white;
  color: #777;
}
.btn--white::after {
  background-color: white;
}
.btn::after {
  /* In an after pseudo-element, ALWAYS is necessary to specify 
  the content and display properties. Otherwise it will not be displayed
  */
  content: "";
  /* 
  In this case, inline-block because the btn class is an
  inline-block and we want to mimic it
  */
  display: inline-block;
  /* 
  ::after is treated like a child element. So take up all
  height and width of the parent element 
  */
  height: 100%;
  width: 100%;
  border-radius: 10rem;
  /* Put the pseudo-element behind the actual button */
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all 0.4s;
}
.btn--animated {
  animation: moveInBottom 1s ease-in 0.75s;
  /* Apply the styling of the 0% before the animation starts */
  animation-fill-mode: backwards;
}

.btn-text:link, .btn-text:visited {
  font-size: 1.6rem;
  color: #7ed56f;
  display: inline-block;
  text-decoration: none;
  border-bottom: 1px solid #7ed56f;
  padding: 3px;
  transition: all 0.2s;
}
.btn-text:hover {
  background-color: #7ed56f;
  color: white;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
  transform: translateY(-2px);
}
.btn-text:active {
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2);
  transform: translateY(0);
}

.composition {
  position: relative;
}
.composition__photo {
  width: 55%;
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);
  position: absolute;
  transition: all 0.2s;
  outline-offset: 2rem;
}
.composition__photo--p1 {
  left: 0;
  top: -2rem;
}
.composition__photo--p2 {
  right: 0;
  top: 2rem;
}
.composition__photo--p3 {
  left: 20%;
  top: 10rem;
}
.composition__photo:hover {
  outline: 1.5rem solid #7ed56f;
  transform: scale(1.05) translateY(-0.5rem);
  box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);
  z-index: 20;
}
.composition:hover .composition__photo:not(:hover) {
  transform: scale(0.95);
}

.header {
  /* To act as reference for .logo-box */
  position: relative;
  /* 95% of the viewport height */
  height: 95vh;
  /* 
  Multiple background images can be specified. The left-most
  is the top layer, and the right-most is the bottom layer.
  */
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url("../img/hero.jpg");
  /* Always try to fit the width of the element (container?) */
  background-size: cover;
  /* 
  The top of the image always stays at the top of the container 
  (The image is cropped in a way such as the top is always visible)
  */
  background-position: top;
  /* Polygon in which the image will still be visible */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
}
.header__logo-box {
  position: absolute;
  /* 
  The reference point for top and left is the parent
  element that has a position: relative, in this case, .header
  */
  top: 4rem;
  left: 4rem;
}
.header__logo {
  height: 3.5rem;
}
.header__text-box {
  position: absolute;
  /* (Moves the top left point to the middle of the container) */
  /* Units are relative to parent */
  top: 40%;
  left: 50%;
  /* (Moves container in x and y) */
  /* Units are relative to element */
  transform: translate(-50%, -50%);
  text-align: center;
}

.row {
  max-width: 114rem;
  margin: 0 auto;
}
.row::after {
  content: "";
  display: table;
  clear: both;
}
.row:not(:last-child) {
  margin-bottom: 8rem;
}
.row [class^=col-] {
  float: left;
}
.row [class^=col-]:not(:last-child) {
  margin-right: 6rem;
}
.row .col-1-of-2 {
  width: calc((100% - 6rem) / 2);
}
.row .col-1-of-3 {
  width: calc((100% - 2 * 6rem) / 3);
}
.row .col-2-of-3 {
  width: calc(2 * (100% - 2 * 6rem) / 3 + 6rem);
}
.row .col-1-of-4 {
  width: calc((100% - 3 * 6rem) / 4);
}
.row .col-2-of-4 {
  width: calc(2 * (100% - 3 * 6rem) / 4 + 6rem);
}
.row .col-3-of-4 {
  width: calc(3 * (100% - 3 * 6rem) / 4 + 2 * 6rem);
}

.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -20vh;
}

/*# sourceMappingURL=style.css.map */
